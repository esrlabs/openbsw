name: Build S32k and posix platform

on: [workflow_call, push, pull_request]

jobs:
  run-command:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        preset: [ "tests-debug", "tests-release", "posix", "posix-with-tracing", "s32k148-gcc" ]
        platform: [ "arm", "linux" ]
        config: [ "Debug", "Release", "RelWithDebInfo" ]
        cxxid: ["gcc", "clang"]
        cxxstd: [ 14, 20 ]
        exclude:
          - preset: "tests-debug"
            platform: "arm"
          - preset: "tests-debug"
            config: "Debug"
          - preset: "tests-debug"
            config: "Release"
          - preset: "tests-debug"
            config: "RelWithDebInfo"
          - preset: "tests-release"
            platform: "arm"
          - preset: "tests-release"
            config: "Debug"
          - preset: "tests-release"
            config: "Release"
          - preset: "tests-release"
            config: "RelWithDebInfo"
          - preset: "posix"
            platform: "arm"
          - preset: "posix"
            config: "RelWithDebInfo"
          - preset: "posix-with-tracing"
            platform: "arm"
          - preset: "posix-with-tracing"
            config: "RelWithDebInfo"
          - preset: "s32k148-gcc"
            platform: "linux"
          - preset: "s32k148-gcc"
            cxxid: "clang"
        include:
          - preset: "wf-tests-debug"
            platform: "linux"
            config: ""
            cxxid: "gcc"
            cxxstd: 0
          - preset: "wf-tests-debug"
            platform: "linux"
            config: ""
            cxxid: "clang"
            cxxstd: 0
          - preset: "wf-tests-release"
            platform: "linux"
            config: ""
            cxxid: "gcc"
            cxxstd: 0
          - preset: "wf-tests-release"
            platform: "linux"
            config: ""
            cxxid: "clang"
            cxxstd: 0
          - preset: "wf-posix"
            platform: "linux"
            config: ""
            cxxid: "gcc"
            cxxstd: 0
          - preset: "wf-posix"
            platform: "linux"
            config: ""
            cxxid: "clang"
            cxxstd: 0
          - preset: "wf-s32k148-gcc"
            platform: "arm"
            config: ""
            cxxid: "gcc"
            cxxstd: 0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache CMake files
        id: cache-cmake
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-cmake-${{ matrix.platform }}-${{ matrix.cxxid }}-${{ matrix.cxxstd }}-${{ hashFiles('**/*.cpp', '**/*.h',  '**/*.cmake', '**/*.txt', '**/*.c', '**/*.s') }}
          restore-keys: |
            ${{ runner.os }}-cmake-${{ matrix.platform }}-${{ matrix.cxxid }}-${{ matrix.cxxstd }}-

      - name: Build the docker image
        if: steps.cache-cmake.outputs.cache-hit != 'true'
        run: |
          docker build -f docker/Dockerfile.dev -t dev .

      - name: Run the build.py inside the docker container
        if: steps.cache-cmake.outputs.cache-hit != 'true'
        run: |
          docker run --rm -v "$PWD:/home/jenkins" -w /home/jenkins --user $(id -u):4996 dev python3 .ci/build.py --preset "${{ matrix.preset }}" --platform "${{ matrix.platform }}" --cxxid "${{ matrix.cxxid }}" --cxxstd "${{ matrix.cxxstd }}" --config "${{ matrix.config }}"
      
      - name: Run custom CMake build for elf-analyzer 
        if: steps.cache-cmake.outputs.cache-hit != 'true' && matrix.preset == 's32k148-gcc' && matrix.platform == 'arm' && matrix.cxxid == 'gcc' && matrix.cxxstd == '14' && matrix.config != ''
        run: |
          docker run --rm -v "$PWD:/home/jenkins" -w /home/jenkins --user $(id -u):4996 dev bash -c "
            cmake --preset ${{matrix.preset}} -DCMAKE_CXX_FLAGS="-gdwarf-4" -DCMAKE_C_FLAGS="-gdwarf-4" -B elf-analyzer-artifacts
            cmake --build elf-analyzer-artifacts -t app.referenceApp --config ${{ matrix.config }} "

      - name: Set commit hash and metadata
        if: steps.cache-cmake.outputs.cache-hit != 'true' && matrix.platform == 'arm' && matrix.cxxid == 'gcc' && matrix.cxxstd == '14' && matrix.config != ''
        id: vars
        run: |
          echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=elf-s32k148-${{ matrix.cxxid }}-${{ matrix.cxxstd }}-${{ matrix.config }}-gdwarf4-${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Find ELF files
        if: steps.cache-cmake.outputs.cache-hit != 'true' && matrix.platform == 'arm' && matrix.cxxid == 'gcc' && matrix.cxxstd == '14' && matrix.config != ''
        run: |
          mkdir -p elf-artifacts
          cp elf-analyzer-artifacts/executables/referenceApp/application/${{ matrix.config }}/app.referenceApp.elf elf-artifacts/

      - name: Upload ELF as GitHub Artifact
        if: steps.cache-cmake.outputs.cache-hit != 'true' && matrix.platform == 'arm'  && matrix.cxxid == 'gcc' && matrix.cxxstd == '14' && matrix.config != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: elf-artifacts/*.elf
